name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BAZEL_VERSION: "4.1.0"

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        compiler: [gcc, clang]

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Print compiler info
      run: ${{ matrix.compiler }} --version

    - id: cache-bazel-install
      uses: actions/cache@v2
      with:
        path: |
          ~/bin/bazel*
          ~/.bazel
        key: ${{ matrix.os }}-bazel-${{ env.BAZEL_VERSION }}

    - id: cache-bazel-out
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/bazel
        key: ${{ matrix.os }}-bazel-${{ env.BAZEL_VERSION }}-${{ matrix.compiler }}-${{ github.sha }}
        restore-keys: |
          ${{ matrix.os }}-bazel-${{ env.BAZEL_VERSION }}-${{ matrix.compiler }}-

    - name: Setup Bazel
      run: |
        if [[ "${{ steps.cache-bazel-install.outputs.cache-hit }}" != "true" ]]; then
          OS=linux
          URL="https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-installer-${OS}-x86_64.sh"

          wget -O install.sh "${URL}"
          chmod +x install.sh
          ./install.sh --user
          rm -f install.sh
        fi

        cat .bazelrc.ci >> .bazelrc

    - name: Build and Test
      run: |
        bazel build --config=${{ matrix.compiler }} //...
        bazel test --config=${{ matrix.compiler }} //...

  format:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2

    - name: Install clang-format
      run: |
        sudo apt-get install -y clang-format
        clang-format --version

    - name: Run clang-format
      run: |
        ./run_format.sh clang-format
        git --no-pager diff
        git update-index --really-refresh
        git --no-pager diff

  lint:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        compiler: [clang]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install clang-tidy
        run: |
          sudo apt-get install -y clang-tidy
          clang-tidy --version

      - id: cache-bazel-install
        uses: actions/cache@v2
        with:
          path: |
            ~/bin/bazel*
            ~/.bazel
          key: ${{ matrix.os }}-bazel-${{ env.BAZEL_VERSION }}

      - id: cache-bazel-out
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/bazel
          key: ${{ matrix.os }}-bazel-${{ env.BAZEL_VERSION }}-${{ matrix.compiler }}-${{ github.sha }}
          restore-keys: |
            ${{ matrix.os }}-bazel-${{ env.BAZEL_VERSION }}-${{ matrix.compiler }}-

      - name: Setup Bazel
        run: |
          if [[ "${{ steps.cache-bazel-install.outputs.cache-hit }}" != 'true' ]]; then
            OS=linux
            URL="https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-installer-${OS}-x86_64.sh"

            wget -O install.sh "${URL}"
            chmod +x install.sh
            ./install.sh --user
            rm -f install.sh
          fi

          cat .bazelrc.ci >> .bazelrc

      - name: Lint
        run: |
          bazel test --config=${{ matrix.compiler }} $(bazel query 'attr(tags, "lint", tests(//...))')
